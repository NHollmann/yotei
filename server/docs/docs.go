// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event": {
            "get": {
                "description": "Get all events based on permissions",
                "tags": [
                    "Event"
                ],
                "summary": "Get all events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Every user can create a new event",
                "tags": [
                    "Event"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Data for new event",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.handleEventCreate.eventDataType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{accessKey}": {
            "get": {
                "description": "Can be used by anyone who haves the access key",
                "tags": [
                    "Event"
                ],
                "summary": "Get one event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event access key",
                        "name": "accessKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "event": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Only the creator and all administrators can update an event",
                "tags": [
                    "Event"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event access key",
                        "name": "accessKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Everybody can use this route, if the user is logged in, the participant will be linked to the user",
                "tags": [
                    "Event"
                ],
                "summary": "Add a participant to an existing event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event access key",
                        "name": "accessKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Only the creator and all administrators can delete an event",
                "tags": [
                    "Event"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event access key",
                        "name": "accessKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Everyone can update a participant except there is an user linked to it",
                "tags": [
                    "Event"
                ],
                "summary": "Update a participant of the current event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event access key",
                        "name": "accessKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login an existing user with a username and password",
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout the current user",
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Only works for administrators",
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of all users",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "users": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/controller.publicUser"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only admins can access the user list",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Only works for administrators",
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Data for new user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.handleUserCreate.userDataType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User ID of newly created user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userId": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "description": "Only works for administrators and the user itself",
                "tags": [
                    "User"
                ],
                "summary": "Get one user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/controller.publicUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only admins and the user itself can access a user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Only works for administrators and the user itself",
                "tags": [
                    "User"
                ],
                "summary": "Update an user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data for updated user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.handleUserUpdate.userDataType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User ID of updated user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userId": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Only works for administrators and the user itself",
                "tags": [
                    "User"
                ],
                "summary": "Delete an user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User ID of deleted user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userId": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only admins and the user itself can delete a user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.handleEventCreate.eventDataType": {
            "type": "object",
            "required": [
                "name",
                "username"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Klickrausch"
                },
                "username": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "controller.handleUserCreate.userDataType": {
            "type": "object",
            "required": [
                "name",
                "password",
                "username"
            ],
            "properties": {
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Max Mustermann"
                },
                "password": {
                    "type": "string",
                    "example": "catsAreAwesome"
                },
                "username": {
                    "type": "string",
                    "example": "mmustermann"
                }
            }
        },
        "controller.handleUserUpdate.userDataType": {
            "type": "object",
            "required": [
                "name",
                "username"
            ],
            "properties": {
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Max Mustermann"
                },
                "passworChangeRequired": {
                    "type": "boolean",
                    "example": false
                },
                "password": {
                    "type": "string",
                    "example": "catsAreAwesome"
                },
                "username": {
                    "type": "string",
                    "example": "mmustermann"
                }
            }
        },
        "controller.publicUser": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-05-29T15:34:14.198515266+02:00"
                },
                "id": {
                    "type": "integer",
                    "example": 17
                },
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Mark Maximus"
                },
                "passwordChangeRequired": {
                    "type": "boolean",
                    "example": false
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-05-30T15:12:35.463734634+02:00"
                },
                "username": {
                    "type": "string",
                    "example": "maximum"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Yotei API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
